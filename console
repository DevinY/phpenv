#!/bin/bash
if [ ! -f .env ];then
    echo "dot env file is required."
    exit
fi
export CPU=$(uname -m)
source .env
source .functions.sh

if [[ "$1" = 'info' && "$2" = 'all' ]];then
    shift 2
    . ./all
    exit
fi

if [[ "$1" = 'info' && "$2" = 'ports' ]];then
    shift 2
    ./ports
    exit
fi

if [[ "$1" = 'commit' ]];then
    if [[ "$2" != "" ]];then
        docker ps -f name=$2|grep -vE '^CONTAINER'|awk '{print "CONTAINER ID:"$1," IMAGE:"$2," NAME:" $NF}'
        NAMES_NUMBER=$(docker ps -f name=$2|grep -vE '^CONTAINER'|awk '{print $1,$NF}'|wc -l)
        if [ $NAMES_NUMBER -eq 1 ];then
            CONTAINER_NAME=$(docker ps -f name=$2|grep -vE '^CONTAINER'|awk '{print $NF}')
            COMMIT_ARG=$(docker ps|grep $CONTAINER_NAME|awk '{print $1,$2}')
            echo $COMMIT_ARG
            echo "docker commit $COMMIT_ARG"
            IMAGE_NAME=$(docker ps -f name=$2|grep -vE '^CONTAINER'|awk '{print $2}')
            echo "Do you wish to run above command to change for this image ${IMAGE_NAME}?"
            select yn in "Yes" "No"; do
                case $yn in
                    Yes ) docker commit $COMMIT_ARG; break;;
                    No ) exit;;
                esac
            done
            exit
        fi
        if [ $NAMES_NUMBER -gt 1 ];then
            echo "Unable commit by multiple names."
            else
            echo "container name not found."
        fi
        exit
    else
        console ps
        echo "You have a running container, please select one to commit."
        echo "./console commit <Name>"
    exit
    fi
fi

if [[ "$1" = 'help' ]];then
    echo "Usage: $0 [all|info|start|stop|link|reload|commit|drive|<project>]"
    echo "  all: show all projects running status"
    echo "  info: show .env file"
    echo "  start: start .env project"
    echo "  stop: stop .env project"
    echo "  commit: commit image for running container"
    echo "  drive: run bash for drive.yml defualt service name"
    echo "  help: $0"
    exit;
fi

if [[ "$1" = 'all' ]];then
    shift 1
    . ./all
    exit
fi

if [ "$1" = 'info' ];then
    shift 1
    ./info
    exit
fi

if [ "$1" = 'stop' ];then
    shift 1
    console stop $@
    exit
fi

if [ "$1" = 'start' ];then
    shift 1
    console start $@
    exit
fi

if [ "$1" = 'restart' ];then
    shift 1
    console restart $@
    exit
fi

if [ "$1" = 'down' ];then
    shift 1
    console down $@
    exit
fi

if [ "$1" = 'up' ];then
    shift 1
    console up $@
    exit
fi

if [ "$1" = 'link' ];then
    shift 1
    ./link
    exit
fi
#reload nginx
if [ "$1" = 'reload' ];then
    . ./reload
    exit
fi

#執行容器內的命令
if [ "$1" = 'artisan' ];then
    docker-compose -p ${PROJECT} exec php php $@
    exit 0
fi

#Default Workspace
if [ "$1" = '' ];then
    exec_bash $(get_workspace)
    exit
fi

#進入ssh容器
if [ "$1" = 'ssh' ];then
    exec_bash $1
fi

#進入Drive容器
if [ "$1" = 'drive' ];then
    exec_bash $1 public
fi

#檢測是否為.env名稱，如果是就進入
if [ "$1" ];then
    if [ -f envs/$1 ];then
            #重新連結並進入容器
            ln -sf envs/${1} .env
            PROJECT=$(get_project)
            echo "Link to Project of "${PROJECT}
            shift 1
            echo "Entering service $(get_workspace) as workspace"
            console exec $(get_workspace) bash
        exit
    fi
fi
echo $CPU
echo Project: $(ls -l .env|cut -d/ -f 2)
console $@